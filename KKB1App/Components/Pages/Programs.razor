@page "/programs"
@page "/programs/{ProgramId:int}"

@using KKB1App.Data
@using KKB1App.Data.Models

@inject ProgramService ProgramService
@inject ArtistService ArtistService
@inject NavigationManager NavManager

<h3>Programme verwalten</h3>
<ProtectedPage>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p style="color:@(IsSuccess ? "green" : "red")">@Message</p>
    }

    <div style="max-width: 600px; margin-bottom: 2rem;">
        <h4>@((NewProgram.ProgramId == 0) ? "Neues Programm erstellen" : "Programm bearbeiten")</h4>

        <div class="form-group mb-2">
            <label>Titel</label>
            <input class="form-control" @bind="NewProgram.Title" />
        </div>

        <div class="form-group mb-2">
            <label>Beschreibung</label>
            <textarea class="form-control" @bind="NewProgram.Description"></textarea>
        </div>

        <div class="form-group mb-2">
            <label>Startdatum</label>
            <input type="date" class="form-control" @bind="NewProgram.StartDate" />
        </div>

        <div class="form-group mb-2">
            <label>Enddatum</label>
            <input type="date" class="form-control" @bind="NewProgram.EndDate" />
        </div>

        <div class="form-group mb-2">
            <label>Honorar (€)</label>
            <input type="number" step="0.01" class="form-control" @bind="NewProgram.Fee" />
        </div>

        <div class="form-group mb-2">
            <label>Zahlungsart</label>
            <select class="form-control" @bind="NewProgram.PaymentMode">
                @foreach (var mode in Enum.GetValues<Enums.PaymentMode>())
                {
                    <option value="@mode">@mode</option>
                }
            </select>
        </div>

        <div class="form-group mb-3">
            <label>Künstler</label>
            <select class="form-control" @bind="NewProgram.ArtistId">
                <option disabled selected value="0">-- Bitte wählen --</option>
                @foreach (var artist in AllArtists)
                {
                    <option value="@artist.ArtistId">@artist.ArtistName</option>
                }
            </select>

        </div>

        <button class="btn btn-success" @onclick="AddProgram">@((NewProgram.ProgramId == 0) ? "Programm hinzufügen" : "Programm bearbeiten")</button>
    </div>

    <hr />

    <h4>Alle Programme</h4>

    @if (AllPrograms == null)
    {
        <p>Lade Programme...</p>
    }
    else if (AllPrograms.Count == 0)
    {
        <p>Keine Programme vorhanden.</p>
    }
    else
    {
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Titel</th>
                    <th>Künstler</th>
                    <th>Laufzeit</th>
                    <th>Zahlung</th>
                    <th>Honorar</th>
                    <th>Aktionen</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in AllPrograms)
                {
                    <tr>
                        <td>@p.Title</td>
                        <td>@p.Artist?.ArtistName</td>
                        <td>@p.StartDate.ToShortDateString() – @p.EndDate.ToShortDateString()</td>
                        <td>@p.PaymentMode</td>
                        <td>@p.Fee €</td>
                        <td>
                            <button @onclick="()=> EditProgram(p.ProgramId)">Bearbeiten</button>
                            <button @onclick="()=> RemoveProgram(p.ProgramId)">Löschen</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</ProtectedPage>

@code {
    private List<Artist> AllArtists = new();
    private List<Program> AllPrograms = new();

    [Parameter]
    public int ProgramId { get; set; } = 0;

    private Program NewProgram = new()
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            PaymentMode = Enums.PaymentMode.Prepaid
        };

    private string Message = string.Empty;
    private bool IsSuccess = false;

    protected override async Task OnParametersSetAsync()
    {
        if(ProgramId != 0)
        {
            var program = await ProgramService.GetProgramByIdAsync(ProgramId);
            if(program != null)
            {
                NewProgram.ProgramId = ProgramId;
                NewProgram.StartDate = program.StartDate;
                NewProgram.EndDate = program.EndDate;
                NewProgram.Fee = program.Fee;
                NewProgram.Description = program.Description;
                NewProgram.ArtistId = program.ArtistId;
                NewProgram.PaymentMode = program.PaymentMode;
                NewProgram.Title = program.Title;

                StateHasChanged();

            }

        }

        AllArtists = await ArtistService.GetAllArtistsAsync();
        AllPrograms = await ProgramService.GetAllProgramsAsync();
    }

    private async Task AddProgram()
    {
        //überprüft ob ein titel eingegebn wurde oder ein künstler ausgewählt wurde
        if (string.IsNullOrWhiteSpace(NewProgram.Title) || NewProgram.ArtistId == 0)
        {
            Message = "Bitte alle Felder korrekt ausfüllen.";
            IsSuccess = false;
            return;
        }

        await ProgramService.AddOrEditProgramAsync(NewProgram);

        Message = "Programm erfolgreich hinzugefügt.";
        IsSuccess = true;

        NewProgram = new()
            {
                ProgramId = 0,
                StartDate = DateTime.Today,
                EndDate = DateTime.Today.AddDays(1),
                PaymentMode = Enums.PaymentMode.Prepaid
            };


        //ruft alle programm aus der db ab
        AllPrograms = await ProgramService.GetAllProgramsAsync();
    }

    /// <summary>
    /// Leitet nochmal auf diese seite aber mit der id
    /// </summary>
    /// <param name="programId"></param>
    private void EditProgram(int programId)
    {
        NavManager.NavigateTo($"/programs/{programId}");
    }

    /// <summary>
    /// Entfernt ein program per id aus der db
    /// </summary>
    /// <param name="programId"></param>
    /// <returns></returns>
    private async Task RemoveProgram (int programId)
    {
        var removed = await ProgramService.RemoveProgramByIdAsync(programId);

        if (removed)
        {
            Message = "Programm wurde erfolgreich entfernt.";
        }
        else
        {
            Message = "Programm konnte nicht entfernt werden, bitte versuchen sie es erneut.";
        }

        AllPrograms = await ProgramService.GetAllProgramsAsync();

        StateHasChanged();

    }
}